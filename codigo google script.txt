// Variáveis globais para armazenar dados do ADM logado
var usuarioLogadoAdm = {
  nome: "", // Nome do ADM logado
  email: "" // Email do ADM logado
};

// Variáveis globais para armazenar dados do Colaborador logado
var usuarioLogadoColab = {
  nome: "", // Nome do Colaborador logado
  email: "" // Email do Colaborador logado
};

// Função do tipo GET que retorna a tela de login
function doGet() {
  return HtmlService.createHtmlOutputFromFile('index');
}

// Função de validação de login
function validarLogin(email, senha) {
  const planilha = SpreadsheetApp.openById('1wEOGRGPWcdlY4_hrUbANTw48S3juVeYtlALP5BIgoq8');
  const aba = planilha.getSheetByName('dados_usuarios');
  const dados = aba.getDataRange().getValues();

  Logger.log("Tentativa de login com email: " + email); // Log do e-mail

  // Percorre os dados e verifica se existe um usuário com o email e senha informados
  for (let i = 1; i < dados.length; i++) {
    const [nome, emailUsuario, senhaUsuario, categoria] = dados[i];
    if (emailUsuario === email && senhaUsuario === senha) {
      // Chama setUsuarioLogado para definir as variáveis globais corretamente
      setUsuarioLogado(nome, email, categoria);
      Logger.log("Usuário logado: " + nome + ", Email: " + emailUsuario + ", Categoria: " + categoria); // Log do usuário logado
      return { sucesso: true, categoria, nome, email: emailUsuario }; // Retorna o nome e email do usuário
    }
  }

  // Se não encontrar, retorna mensagem de erro
  return { sucesso: false, mensagem: 'Email ou senha inválidos.' };
}

// Função para definir o usuário logado
function setUsuarioLogado(nome, email, tipo) {
  if (tipo === 'adm') {
    usuarioLogadoAdm.nome = nome;
    usuarioLogadoAdm.email = email;
    Logger.log('Usuário ADM logado: ' + nome + ', Email: ' + email);
  } else {
    usuarioLogadoColab.nome = nome;
    usuarioLogadoColab.email = email;
    Logger.log('Colaborador logado: ' + nome + ', Email: ' + email);
  }
}

// Função para obter os dados do usuário logado
function getUsuarioLogadoAdm() {
  Logger.log(usuarioLogadoAdm); // Adicione este log
  return usuarioLogadoAdm; // Retorna as informações do usuário ADM logado
}

// Função para obter os dados do usuário logado
// Função para obter os dados do usuário logado
// Função para obter os dados do usuário logado
function getUsuarioLogadoColab() {
  Logger.log(usuarioLogadoColab); // Adicione este log
  return usuarioLogadoColab; // Retorna as informações do colaborador logado
}

// Função para carregar os dados do usuário logado
function carregarUsuarioLogadoAdm() {
  return getUsuarioLogadoAdm(); // Retorna as informações do usuário ADM logado
}

// Função para carregar os dados do usuário logado
function carregarUsuarioLogadoColab() {
  return getUsuarioLogadoColab(); // Retorna as informações do colaborador logado
}

// Função para cadastrar um novo usuário
function cadastrarNovoUsuario(cad_nome, cad_email, cad_senha, cad_tipoUsuario) {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  const senhaRegex = /^(?=(?:[^a-zA-Z]*[a-zA-Z]){2})[^\s]{6,8}$/;

  if (!emailRegex.test(cad_email)) {
    return { sucesso: false, mensagem: 'Email inválido.' };
  }
  if (!senhaRegex.test(cad_senha)) {
    return { sucesso: false, mensagem: 'A senha deve conter no mínimo 2 letras e ter entre 6 e 8 caracteres.' };
  }

  const planilha = SpreadsheetApp.openById('1wEOGRGPWcdlY4_hrUbANTw48S3juVeYtlALP5BIgoq8');
  const aba = planilha.getSheetByName('dados_usuarios');
  aba.appendRow([cad_nome, cad_email, cad_senha, cad_tipoUsuario]);
  return { sucesso: true, mensagem: 'Usuário cadastrado com sucesso!' };
}

// Função para carregar os colaboradores
function carregarColaboradores() {
  const planilha = SpreadsheetApp.openById('1wEOGRGPWcdlY4_hrUbANTw48S3juVeYtlALP5BIgoq8');
  const aba = planilha.getSheetByName('dados_usuarios');
  const dados = aba.getDataRange().getValues();
  const colaboradores = [];

  for (let i = 1; i < dados.length; i++) {
    if (dados[i][3] === 'colaborador') { // Verifica se é colaborador
      colaboradores.push(dados[i][0]); // Adiciona o nome do colaborador
    }
  }
  return colaboradores;
}

// Função para buscar o nome completo do usuário logado baseado no e-mail
function buscarNomeUsuario(email) {
  var planilhaUsuarios = SpreadsheetApp.openById('1wEOGRGPWcdlY4_hrUbANTw48S3juVeYtlALP5BIgoq8');
  var abaUsuarios = planilhaUsuarios.getSheetByName('dados_usuarios');
  var dados = abaUsuarios.getDataRange().getValues();  // Recupera todas as linhas de dados

  // Busca o nome completo pelo e-mail
  for (var i = 0; i < dados.length; i++) {
    if (dados[i][1] === email) {  // Coluna B (índice 1) contém o e-mail
      return dados[i][0];  // Coluna A (índice 0) contém o nome completo
    }
  }
  return null;  // Retorna null caso o e-mail não seja encontrado
}

// Função para inserir feedback
function inserirFeedback2(dados) {
  const planilha = SpreadsheetApp.openById('1wEOGRGPWcdlY4_hrUbANTw48S3juVeYtlALP5BIgoq8');
  const aba = planilha.getSheetByName('dados_feed');
  
  const dataAtual = new Date();
  const protocolo = `${dados.emailAdm.substring(0, 3).toUpperCase()}${dataAtual.getFullYear()}${(dataAtual.getMonth() + 1).toString().padStart(2, '0')}${dataAtual.getDate().toString().padStart(2, '0')}${dataAtual.getHours().toString().padStart(2, '0')}${dataAtual.getMinutes().toString().padStart(2, '0')}${dados.nomeColaborador.substring(0, 3).toUpperCase()}`;

  // Aqui você deve buscar o email do colaborador com base no nome
  const emailColaborador = buscarEmailColaborador(dados.nomeColaborador); // Função que você deve implementar

  aba.appendRow([
    protocolo, 
    dataAtual, 
    dataAtual.getDate(), 
    dataAtual.getMonth() + 1, 
    dataAtual.getFullYear(), 
    dados.nomeAdm, // Use o nome do ADM passado do front-end
    dados.emailAdm, // Use o email do ADM passado do front-end
    dados.nomeColaborador, 
    emailColaborador, // Email do colaborador buscado
    dados.assuntoFeed, 
    dados.textoFeed, 
    "Pendente"
  ]);
  
  return { sucesso: true, mensagem: 'Feedback inserido com sucesso!' };
}

// Função para buscar o email do colaborador com base no nome
function buscarEmailColaborador(nomeColaborador) {
  const planilha = SpreadsheetApp.openById('1wEOGRGPWcdlY4_hrUbANTw48S3juVeYtlALP5BIgoq8');
  const aba = planilha.getSheetByName('dados_usuarios'); // Supondo que os dados dos colaboradores estão aqui
  const dados = aba.getDataRange().getValues();

  for (let i = 1; i < dados.length; i++) {
    if (dados[i][0] === nomeColaborador) { // Supondo que o nome do colaborador está na primeira coluna
      return dados[i][1]; // Supondo que o email do colaborador está na segunda coluna
    }
  }
  return ""; // Retorna vazio se não encontrar
}

// Função para buscar os feedbacks e retorná-los ao frontend
// Função para buscar todos os feedbacks e retorná-los ao frontend
function buscarFeedbacksDaPlanilha() {
  const planilha = SpreadsheetApp.openById('1wEOGRGPWcdlY4_hrUbANTw48S3juVeYtlALP5BIgoq8');
  const aba = planilha.getSheetByName('dados_feed');
  const dados = aba.getDataRange().getValues();
  const feedbacks = [];

  Logger.log('Dados da planilha: ' + JSON.stringify(dados)); // Log dos dados lidos da planilha

  for (let i = 1; i < dados.length; i++) {
    const dia = dados[i][2]; // Coluna C (dia)
    const mes = dados[i][3]; // Coluna D (mês)
    const ano = dados[i][4]; // Coluna E (ano)

    // Cria um novo objeto Date
    const data = new Date(ano, mes - 1, dia); // O mês é zero-indexado

    feedbacks.push({
      protocolo: dados[i][0],
      data: data.toISOString(), // Armazena a data no formato ISO
      nome: dados[i][5],
      assunto: dados[i][7],
      texto: dados[i][8],
      status: dados[i][11]
    });
  }

  Logger.log('Feedbacks retornados: ' + JSON.stringify(feedbacks)); // Adicione este log
  return feedbacks;
}





// Função para exibir o extrato de feedbacks do colaborador logado
// Função para exibir o extrato de feedbacks do colaborador logado
function extratoFeedbackcolab(email) {
  const planilha = SpreadsheetApp.openById('1wEOGRGPWcdlY4_hrUbANTw48S3juVeYtlALP5BIgoq8');
  const aba = planilha.getSheetByName('dados_feed');
  const dados = aba.getDataRange().getValues();
  const extrato = [];

  Logger.log("Email do colaborador logado: " + email); // Log do email

  for (let i = 1; i < dados.length; i++) {
    Logger.log("Verificando feedback: " + dados[i][8]); // Log do email na planilha
    if (dados[i][8] === email) { // Filtra apenas os feedbacks do colaborador logado
      const dataFeedback = new Date(dados[i][1]); // Supondo que a data esteja na coluna 1
      extrato.push({
        protocolo: dados[i][0],
        data: dataFeedback.toISOString(), // Armazena a data no formato ISO
        supervisor: dados[i][5],          
        assunto: dados[i][9],   
        status: dados[i][11]
      });
    }
  }
  Logger.log("Extrato de feedbacks: " + JSON.stringify(extrato)); // Log do extrato
  return extrato; // Retorna o extrato, que pode ser um array vazio
}

